name: Validate Infrastructure Code

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'templates/**.bicep'
      - 'schemas/**.json'
      - 'tests/**'
      - '.github/workflows/validate.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'templates/**.bicep'
      - 'schemas/**.json'
      - 'tests/**'
      - '.github/workflows/validate.yml'

jobs:
  validate-bicep:
    name: Validate Bicep Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        continue-on-error: true

      - name: Install Bicep CLI
        run: |
          az --version
          az bicep install
          az bicep version

      - name: Build Bicep Templates
        run: |
          echo "üî® Building Bicep templates..."
          for file in templates/*.bicep; do
            if [ -f "$file" ]; then
              echo "Building: $file"
              az bicep build --file "$file"
              if [ $? -eq 0 ]; then
                echo "‚úÖ Successfully built: $file"
              else
                echo "‚ùå Failed to build: $file"
                exit 1
              fi
            fi
          done

      - name: Lint Bicep Templates
        run: |
          echo "üîç Linting Bicep templates..."
          for file in templates/*.bicep; do
            if [ -f "$file" ]; then
              echo "Linting: $file"
              az bicep lint --file "$file"
            fi
          done
        continue-on-error: true

  validate-schemas:
    name: Validate JSON Schemas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate JSON Schemas
        run: npm run test:schemas

      - name: Check JSON formatting
        run: |
          echo "üìù Checking JSON formatting..."
          for file in schemas/*.json; do
            if [ -f "$file" ]; then
              echo "Checking: $file"
              python3 -m json.tool "$file" > /dev/null
              if [ $? -eq 0 ]; then
                echo "‚úÖ Valid JSON: $file"
              else
                echo "‚ùå Invalid JSON: $file"
                exit 1
              fi
            fi
          done

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-bicep, validate-schemas, security-scan]
    if: always()
    steps:
      - name: Check validation results
        run: |
          echo "üìä Validation Summary"
          echo "===================="
          echo "Bicep validation: ${{ needs.validate-bicep.result }}"
          echo "Schema validation: ${{ needs.validate-schemas.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"

          if [ "${{ needs.validate-bicep.result }}" != "success" ] || [ "${{ needs.validate-schemas.result }}" != "success" ]; then
            echo "‚ùå Validation failed"
            exit 1
          fi

          echo "‚úÖ All validations passed"
